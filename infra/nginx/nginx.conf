events {}

http {
  # Load default MIME type mappings so assets resolve correctly.
  # 정적 자산이 올바른 MIME 타입으로 전달되도록 기본 매핑을 불러옵니다.
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  sendfile on;

  server {
    listen 80;
    server_name _;

    # Serve the React single-page application from the html root.
    # React 단일 페이지 애플리케이션을 html 루트에서 제공합니다.
    root /usr/share/nginx/html;

    # ============================
    # Collector bundle under /apilog
    # /apilog 경로 아래의 수집기 번들
    # ============================
    location /apilog/ {
      # Use alias so the request path maps into the bundle directory.
      # 요청 경로가 번들 디렉터리에 매핑되도록 alias를 사용합니다.
      alias /usr/share/nginx/html/apilog/;

      # Allow scripts to be consumed from any origin for easy embedding.
      # 어떤 오리진에서도 스크립트를 사용할 수 있도록 허용합니다.
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods "GET, OPTIONS";
      add_header Access-Control-Allow-Headers "*";

      # Only serve concrete files; otherwise respond with 404.
      # 존재하는 파일만 제공하고 그렇지 않으면 404로 응답합니다.
      try_files  =404;
    }

    # ============================
    # API proxy at /api
    # /api 경로의 API 프록시
    # ============================
    location /api/ {
      proxy_pass http://api:8000;

      # Forward original request metadata for FastAPI logging and auth.
      # FastAPI 로깅과 인증을 위해 원본 요청 메타데이터를 전달합니다.
      proxy_set_header Host System.Management.Automation.Internal.Host.InternalHost;
      proxy_set_header X-Real-IP ;
      proxy_set_header X-Forwarded-For ;
      proxy_set_header X-Forwarded-Proto ;
    }

    # ============================
    # React SPA fallback
    # React SPA 폴백
    # ============================
    location / {
      # Attempt static files first, otherwise fall back to index.html.
      # 정적 파일을 우선 반환하고, 없으면 index.html을 제공합니다.
      try_files  / /index.html;
    }
  }
}
